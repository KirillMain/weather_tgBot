import time
import ast
import telebot
import config
import weather
import schedule
from threading import Thread
import image

bot = telebot.TeleBot(config.TOKEN)


@bot.message_handler(commands=['start'])
def send_welcome(message):
    with open("tgweatherBOT/data/chooses/users_params.txt", "r", encoding="utf-8") as f:
        d = ast.literal_eval(f.read())
        idd = str(message.from_user.id)
        if idd not in d.keys():
            d.update({idd: ['–û–±–ª–∞—á–Ω–æ—Å—Ç—å', '–î–∞–≤–ª–µ–Ω–∏–µ', '–ò–Ω–¥–µ–∫—Å –£–§', '–í–ª–∞–∂–Ω–æ—Å—Ç—å', '–í–µ—Ç–µ—Ä']})
    with open("tgweatherBOT/data/chooses/users_params.txt", "w", encoding="utf-8") as f:
        f.write(str(d))
    st = open("tgweatherBOT/stick/hello.tgs", 'rb')
    bot.send_sticker(message.chat.id, st)

    text = f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name},\n' \
           f'–Ø –º–æ–≥—É –≤—ã—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ –ø–æ–≥–æ–¥—É –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –Ω–µ–¥–µ–ª—é –≤–ø–µ—Ä–µ–¥!\n' \
           f'–ù–∞–ø–∏—à–∏ /help –∏–ª–∏ –Ω–∞–∂–º–∏ –Ω–∞ "–ò–Ω—Ñ–æ" –¥–ª—è –±–æ–ª—å—à–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.'
    btns_main(message, text)


@bot.message_handler(commands=['help'])
def send_help(message):
    text = '–Ø —É–º–µ—é –≤—ã—Å—ã–ª–∞—Ç—å –ø–æ–≥–æ–¥—É –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –Ω–µ–¥–µ–ª—é –≤–ø–µ—Ä–µ–¥!\n\n' \
           '"–ù–∞—Å—Ç—Ä–æ–π–∫–∏" - —Ç—É—Ç —Ç—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –∫–∞–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–æ–≥–æ–¥—ã –º–Ω–µ –≤—ã—Å—ã–ª–∞—Ç—å.\n' \
           '"–†–∞—Å—Å—ã–ª–∫–∞" - —Ç—É—Ç —Ç—ã –º–æ–∂–µ—à—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É.\n'
    btns_main(message, text)


@bot.message_handler()
def common_message(message):
    if message.text == '–ª–µ–≤–∞ –ª–æ—Ö –µ–±–∞–Ω—ã–π':
        text = '–ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≥–ª–∞—Å–µ–Ω, –∞ –µ—â–µ –æ–Ω —Ö—É–µ—Å–æ—Å, —É –º–µ–Ω—è –µ—Å—Ç—å –¥–æ–∫–æ–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞'
        btns_main(message, text)
        
    elif message.text in '1234567891011121314':
        text = month_text(message)
        btns_main(message, text)

    elif message.text == "–°–µ–≥–æ–¥–Ω—è‚òÄÔ∏è":
        text = today(message)
        btns_main(message, text)

    elif message.text == "–ù–µ–¥–µ–ª—è‚õÖÔ∏è":
        boolean = check_for_text(message)
        if boolean:
            text = '–í—ã–±–µ—Ä–∏ –Ω–∞ –∫–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π —Ç—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É.\n\n–¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å —á–∏—Å–ª–æ (–¥–æ 14).'
            btns_select_days(message, text)
        else:
            text = month(message)
            btns_main(message, text)

    elif message.text == "–†–∞—Å—Å—ã–ª–∫–∞üì™":
        text = "–í—ã–±–µ—Ä–∏—Ç–µ, –≤–æ —Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å—Å—è –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã.\n" \
               "–ù–∞–ø—Ä–∏–º–µ—Ä: 10:00, 08:00 –∏ —Ç.–¥\n" \
               "!!–º–∏–Ω—É—Ç—ã –≤—Å–µ–≥–¥–∞ :00!!"

        with open('tgweatherBOT/data/chooses/user_times.txt', 'r', encoding='utf-8') as f:
            d = ast.literal_eval(f.read())
            idd = message.from_user.id
            text_user_times = ''
            for k in d.keys():
                if idd in d[k]:
                    if text_user_times != '':
                        text_user_times += ", "
                    text_user_times += f"{k}"
            text += f'\n\n–°–µ–π—á–∞—Å —Ä–∞—Å—Å—ã–ª–∫–∞ –≤ {text_user_times}.'
        btns_select_times(message, text)

    elif message.text[0] == "–ò" and message.text[1] == '–Ω':
        send_help(message)

    elif message.text[0] == "–ù" and message.text[2] == "—Å":
        with open("tgweatherBOT/data/chooses/users_params.txt", "r", encoding="utf-8") as f:
            dic = ast.literal_eval(f.read())
            idd = str(message.from_user.id)
            arr = dic[idd]
            if '–¢–µ–∫—Å—Ç' in arr:
                t = '—Ñ–æ—Ä–º–∞—Ç: —Ç–µ–∫—Å—Ç'
            else:
                t = '—Ñ–æ—Ä–º–∞—Ç: —Ñ–æ—Ç–æ'
            text = f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–æ–≥–æ–¥—ã –±—É–¥—É—Ç –≤—ã—Å—ã–ª–∞—Ç—å—Å—è ({t})."

        if len(arr) != 0 or arr == ['–¢–µ–∫—Å—Ç']:
            text += f'\n\n–°–µ–π—á–∞—Å —É —Ç–µ–±—è –±—É–¥—É—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è —Å–ª–µ–¥—É—é—â–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:\n'
            for i in arr:
                if i != arr[0]:
                    text += f", "
                text += f'{i}'
        else:
            text += "\n\n–°–µ–π—á–∞—Å —É –í–∞—Å –≤—ã–≤–æ–¥–∏—Ç—Å—è –ª–∏—à—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞."
        btns_choose_today(message, text)

    elif message.text[:-1] == "–û–±–ª–∞—á–Ω–æ—Å—Ç—å":
        text = check_parametrs(message)
        btns_choose_today(message, text)

    elif message.text[:-1] == "–î–∞–≤–ª–µ–Ω–∏–µ":
        text = check_parametrs(message)
        btns_choose_today(message, text)

    elif message.text[:-1] == "–ò–Ω–¥–µ–∫—Å –£–§":
        text = check_parametrs(message)
        btns_choose_today(message, text)

    elif message.text[:-1] == "–í–ª–∞–∂–Ω–æ—Å—Ç—å":
        text = check_parametrs(message)
        btns_choose_today(message, text)

    elif message.text[:-1] == "–í–µ—Ç–µ—Ä":
        text = check_parametrs(message)
        btns_choose_today(message, text)

    elif message.text[:-1] == "–¢–µ–∫—Å—Ç":
        text = check_parametrs(message)
        btns_choose_today(message, text)

    elif message.text == "–ù–∞–∑–∞–¥":
        text = "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
        btns_main(message, text)

    elif message.text in {'00:00', '01:00', '02:00', '03:00', '04:00', '05:00',
                          '06:00', '07:00', '08:00', '09:00', '10:00', '11:00',
                          '12:00', '13:00', '14:00', '15:00', '16:00', '17:00',
                          '18:00', '19:00', '20:00', '21:00', '22:00', '23:00'}:
        text = times(message)
        btns_main(message, text)

    else:
        text = "–ß–æ???"
        btns_main(message, text)


def on_click(message):
    common_message(message)


def btns_main(message, text):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = telebot.types.KeyboardButton("–°–µ–≥–æ–¥–Ω—è‚òÄÔ∏è")
    btn2 = telebot.types.KeyboardButton("–ù–µ–¥–µ–ª—è‚õÖÔ∏è")
    markup.row(btn1, btn2)

    btn3 = telebot.types.KeyboardButton("–†–∞—Å—Å—ã–ª–∫–∞üì™")
    btn4 = telebot.types.KeyboardButton("–ò–Ω—Ñ–æ‚ÑπÔ∏èÔ∏è")
    btn5 = telebot.types.KeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏‚öôÔ∏èÔ∏è")
    markup.row(btn3, btn4, btn5)

    bot.send_message(message.chat.id,
                     text,
                     reply_markup=markup)
    bot.register_next_step_handler(message, on_click)


def btns_choose_today_xar(dic, xar):
    if xar in dic:
        t = telebot.types.KeyboardButton(f'{xar}‚úÖ')
    else:
        t = telebot.types.KeyboardButton(f'{xar}‚ùå')
    return t


def btns_choose_today(message, text):
    with open("tgweatherBOT/data/chooses/users_params.txt", "r", encoding="utf-8") as f:
        asd = ast.literal_eval(f.read())
        idd = str(message.from_user.id)
        if idd not in asd.keys():
            asd.update({idd: []})
        dic = asd[idd]
    with open("tgweatherBOT/data/chooses/users_params.txt", "w", encoding="utf-8") as f:
        f.write(str(asd))

    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = btns_choose_today_xar(dic, "–û–±–ª–∞—á–Ω–æ—Å—Ç—å")
    btn2 = btns_choose_today_xar(dic, "–î–∞–≤–ª–µ–Ω–∏–µ")
    btn3 = btns_choose_today_xar(dic, "–ò–Ω–¥–µ–∫—Å –£–§")
    markup.row(btn1, btn2, btn3)

    btn4 = btns_choose_today_xar(dic, "–í–ª–∞–∂–Ω–æ—Å—Ç—å")
    btn5 = btns_choose_today_xar(dic, "–í–µ—Ç–µ—Ä")
    btn6 = btns_choose_today_xar(dic, "–¢–µ–∫—Å—Ç")
    btn7 = telebot.types.KeyboardButton("–ù–∞–∑–∞–¥")
    markup.row(btn4, btn5, btn6, btn7)
    bot.send_message(message.chat.id,
                     text,
                     reply_markup=markup)
    bot.register_next_step_handler(message, on_click)


def check_parametrs(message):
    with open("tgweatherBOT/data/chooses/users_params.txt", "r", encoding="utf-8") as f:
        dic = ast.literal_eval(f.read())
        idd = str(message.from_user.id)
        if message.text[:-1] in dic[idd]:
            boolean = True
        else:
            boolean = False

    with open("tgweatherBOT/data/chooses/users_params.txt", "w", encoding="utf-8") as f:
        arr = dic[idd]
        if boolean:
            if message.text[:-1] == "–¢–µ–∫—Å—Ç":
                text = f"–¢–µ–ø–µ—Ä—å –≤–∞–º –±—É–¥–µ—Ç –≤—ã—Å—ã–ª–∞—Ç—å –ø–æ–≥–æ–¥–∞ –≤ –∫–∞—Ä—Ç–∏–Ω–∫–µ!"
            else:
                text = f"{message.text[:-1]} –±—ã–ª(–∞) —É–¥–∞–ª–µ–Ω(–∞) –∏–∑ —Å–ø–∏—Å–∫–∞."
            arr.remove(message.text[:-1])
            dic.update({idd: arr})
        else:
            if message.text[:-1] == "–¢–µ–∫—Å—Ç":
                text = f"–¢–µ–ø–µ—Ä—å –≤–∞–º –±—É–¥–µ—Ç –≤—ã—Å—ã–ª–∞—Ç—å –ø–æ–≥–æ–¥–∞ –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è!"
            else:
                text = f"{message.text[:-1]} –±—ã–ª(–∞) –¥–æ–±–∞–≤–ª–µ–Ω(–∞) –≤ —Å–ø–∏—Å–æ–∫."
            arr.append(message.text[:-1])
            dic.update({idd: arr})

        f.write(str(dic))

    if len(arr) != 0:
        text += f'\n\n–°–µ–π—á–∞—Å —É –í–∞—Å –±—É–¥—É—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è —Å–ª–µ–¥—É—é—â–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:\n'
        for i in arr:
            if i != arr[0]:
                text += f", "
            text += f'{i}'
    else:
        text += "\n\n–°–µ–π—á–∞—Å —É –í–∞—Å –≤—ã–≤–æ–¥–∏—Ç—Å—è –ª–∏—à—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞."
    return text


def btns_select_days(message, text):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = telebot.types.KeyboardButton("1")
    btn2 = telebot.types.KeyboardButton("2")
    btn3 = telebot.types.KeyboardButton("3")
    btn4 = telebot.types.KeyboardButton("4")
    btn5 = telebot.types.KeyboardButton("5")
    btn6 = telebot.types.KeyboardButton("6")
    markup.row(btn1, btn2, btn3, btn4, btn5, btn6)

    btn7 = telebot.types.KeyboardButton("7")
    btnback = telebot.types.KeyboardButton('–ù–∞–∑–∞–¥')
    markup.row(btn7, btnback)

    bot.send_message(message.chat.id,
                     text,
                     reply_markup=markup)
    bot.register_next_step_handler(message, on_click)


def btns_select_times(message, text):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)

    btn1 = telebot.types.KeyboardButton("–ù–∞–∑–∞–¥")
    markup.row(btn1)

    bot.send_message(message.chat.id,
                     text,
                     reply_markup=markup)
    bot.register_next_step_handler(message, on_click)


def times(message):
    with open('tgweatherBOT/data/chooses/user_times.txt', 'r', encoding='utf-8') as f:
        d = ast.literal_eval(f.read())

    timee = message.text
    idd = message.from_user.id
    arr = d[timee]
    if idd not in arr:
        arr.append(idd)
        text = f"–í—Ä–µ–º—è {timee} –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ä–∞—Å—Å—ã–ª–∫—É."
    else:
        arr.remove(idd)
        text = f"–í—Ä–µ–º—è {timee} –±—ã–ª–æ —É–±—Ä–∞–Ω–æ –∏–∑ —Ä–∞—Å—Å—ã–ª–∫–∏."

    with open('tgweatherBOT/data/chooses/user_times.txt', 'w', encoding='utf-8') as f:
        f.write(str(d))

    text_user_times = ''
    for k in d.keys():
        if idd in d[k]:
            if text_user_times != '':
                text_user_times += ", "
            text_user_times += f"{k}"

    text += f"\n–¢–µ–ø–µ—Ä—å –í–∞–º –±—É–¥–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ {text_user_times} –≤—ã—Å—ã–ª–∞—Ç—å—Å—è –ø–æ–≥–æ–¥–∞ –Ω–∞ –¥–µ–Ω—å."
    return text


def check_for_text(message):
    with open("tgweatherBOT/data/chooses/users_params.txt", 'r', encoding='utf-8') as f:
        dic = ast.literal_eval(f.read())
        idd = str(message.from_user.id)
        arr = dic[str(idd)]

        if '–¢–µ–∫—Å—Ç' in dic[str(idd)]:
            return True
        else:
            return False


def month(message):
    with open("tgweatherBOT/data/chooses/users_params.txt", 'r', encoding='utf-8') as f:
        dic = ast.literal_eval(f.read())
        idd = str(message.from_user.id)
        arr = dic[str(idd)]

        if '–¢–µ–∫—Å—Ç' in dic[idd]:
            text = month_text(message)
        else:
            text = image.month(arr)
            bot.send_photo(idd, open('data/hz/res_month.png', 'rb'))
    return text


def month_text(message):
    try:
        asd = int(message.text)

        with open("tgweatherBOT/data/chooses/users_params.txt", 'r', encoding='utf-8') as f:
            dic = ast.literal_eval(f.read())
            idd = str(message.from_user.id)
            arr = dic[idd]

        d = weather.w_month()

        text = ""
        if asd <= 0 or asd > 14:
            text = "–ù–µ –Ω—É —Ç—ã –µ–±–ª–∞–Ω —è —Ö—É–µ—é."
        else:
            for i in range(asd):
                if i != 0:
                    text += '\n'
                text += f"------------{d['arr_days'][i]}------------\n" \
                        f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {d['arr_temp'][i]}"

                if "–û–±–ª–∞—á–Ω–æ—Å—Ç—å" in arr:
                    text += f'\n–û–±–ª–∞—á–Ω–æ—Å—Ç—å: {d["arr_sost"][i]}'
                if "–î–∞–≤–ª–µ–Ω–∏–µ" in arr:
                    text += f'\n–î–∞–≤–ª–µ–Ω–∏–µ: {d["arr_davl"][i]}'
                if "–ò–Ω–¥–µ–∫—Å –£–§" in arr:
                    text += f'\n–ò–Ω–¥–µ–∫—Å –£–§: {d["arr_yf"][i]}'
                if "–í–ª–∞–∂–Ω–æ—Å—Ç—å" in arr:
                    text += f'\n–í–ª–∞–∂–Ω–æ—Å—Ç—å: {d["arr_vlag"][i]}'
                if "–í–µ—Ç–µ—Ä" in arr:
                    text += f'\n–í–µ—Ç–µ—Ä: {d["arr_wind"][i]}'

    except ValueError:
        text = "–¢—ã —á–æ –º–Ω–µ –ø–∏—à–µ—à—å? –ß–∏—Å–ª–∞ –µ–±–µ–Ω—å, –≤–∞–ª–µ–Ω–æ–∫."

    return text


def today(message, check=False):  # check - —Ä–∞—Å—Å—ã–ª–∫–∞ –∏–ª–∏ –Ω–µ—Ç
    with open("data/chooses/users_params.txt", 'r', encoding='utf-8') as f:
        dic = ast.literal_eval(f.read())
        if not check:
            idd = str(message.from_user.id)
        else:
            idd = str(message)
        arr = dic[str(idd)]

        if '–¢–µ–∫—Å—Ç' in dic[idd]:
            text = today_text(message, arr, idd)
        else:
            text = image.today(message, arr, idd)
            bot.send_photo(idd, open('data/hz/res_today.png', 'rb'))
    return text


def today_text(message, arr, idd):
    d = weather.w_today()

    leng = len(d['arr_time'])

    t = 0
    for i in range(leng):
        if d["arr_time"][i] == "00:00":
            break
        x = d['arr_temp'][i][:-1]
        if x[0] == "+":
            t += int(x[1:])
        else:
            t -= int(x[1:])
    t /= leng
    if t > 30:
        st = open("stick/zharko.tgs", 'rb')
        bot.send_sticker(idd, st)
    elif t > 20:
        st = open("stick/sunny.tgs", 'rb')
        bot.send_sticker(idd, st)
    elif t > 10:
        st = open("stick/norm.tgs", 'rb')
        bot.send_sticker(idd, st)
    elif t < -10:
        st = open("stick/xolod.webm", 'rb')
        bot.send_sticker(idd, st)

    text = ""
    for i in range(leng):
        if i != 0:
            text += '\n'
        if d["arr_time"][i] == "00:00":
            break

        text += f'----------–í—Ä–µ–º—è: {d["arr_time"][i]}----------\n' \
                f'–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {d["arr_temp"][i]}'

        if "–û–±–ª–∞—á–Ω–æ—Å—Ç—å" in arr:
            text += f'\n–û–±–ª–∞—á–Ω–æ—Å—Ç—å: {d["arr_sost"][i]}'
        if "–î–∞–≤–ª–µ–Ω–∏–µ" in arr:
            text += f'\n–î–∞–≤–ª–µ–Ω–∏–µ: {d["arr_davl"][i]}'
        if "–ò–Ω–¥–µ–∫—Å –£–§" in arr:
            text += f'\n–ò–Ω–¥–µ–∫—Å –£–§: {d["arr_yf"][i]}'
        if "–í–ª–∞–∂–Ω–æ—Å—Ç—å" in arr:
            text += f'\n–í–ª–∞–∂–Ω–æ—Å—Ç—å: {d["arr_vlag"][i]}'
        if "–í–µ—Ç–µ—Ä" in arr:
            text += f'\n–í–µ—Ç–µ—Ä: {d["arr_wind"][i]}'

    return text


def schedule_checker():
    while True:
        schedule.run_pending()
        time.sleep(1)


def mailing():
    weather.w_today(True)
    weather.w_info_today(True)
    weather.w_month(True)
    with open('data/chooses/user_times.txt', 'r', encoding='utf-8') as f:
        d = ast.literal_eval(f.read())

    timee = time.ctime(time.time()).split()
    now_hours = timee[3].split(":")[0]

    if len(now_hours) == 1:
        timee = f"0{now_hours}:00"
    else:
        timee = f"{now_hours}:00"

    for idd in d[timee]:
        text = today(idd, check=True)
        bot.send_message(idd, text)


if __name__ == "__main__":
    schedule.every().day.at("00:00:00").do(mailing)
    schedule.every().day.at("01:00:00").do(mailing)
    schedule.every().day.at("02:00:00").do(mailing)
    schedule.every().day.at("03:00:00").do(mailing)
    schedule.every().day.at("04:00:00").do(mailing)
    schedule.every().day.at("05:00:00").do(mailing)
    schedule.every().day.at("06:00:00").do(mailing)
    schedule.every().day.at("07:00:00").do(mailing)
    schedule.every().day.at("08:00:00").do(mailing)
    schedule.every().day.at("09:00:00").do(mailing)
    schedule.every().day.at("10:00:00").do(mailing)
    schedule.every().day.at("11:00:00").do(mailing)
    schedule.every().day.at("12:00:00").do(mailing)
    schedule.every().day.at("13:00:00").do(mailing)
    schedule.every().day.at("14:00:00").do(mailing)
    schedule.every().day.at("15:00:00").do(mailing)
    schedule.every().day.at("16:00:00").do(mailing)
    schedule.every().day.at("17:00:00").do(mailing)
    schedule.every().day.at("18:00:00").do(mailing)
    schedule.every().day.at("19:00:00").do(mailing)
    schedule.every().day.at("20:00:00").do(mailing)
    schedule.every().day.at("21:00:00").do(mailing)
    schedule.every().day.at("22:00:00").do(mailing)
    schedule.every().day.at("23:00:00").do(mailing)

    # –†–∞—Å–∫—Ä—É—Ç–∏—Ç–µ –ø–æ—Ç–æ–∫, —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è, —á—Ç–æ–±—ã –æ–Ω –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –≤–∞—à–µ–≥–æ –±–æ—Ç–∞.
    # –î–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è schedule_checker, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
    # to see if the scheduled job needs to be ran.
    Thread(target=schedule_checker).start()

bot.polling(none_stop=True, interval=0)
